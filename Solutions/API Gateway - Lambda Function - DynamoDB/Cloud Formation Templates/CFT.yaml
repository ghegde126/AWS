AWSTemplateFormatVersion: 2010-09-09

Description: Serverless application setup. API Gateway - Lambda Function - DynamoDB

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "DynamoDB Parameters"
        Parameters:
          - AttributeDefinitionsAttributeName
          - AttributeDefinitionsAttributeType
          - BillingMode
          - ReadCapacityUnits
          - WriteCapacityUnits
          - ApiKeySourceType
      
      - Label:
          default: "Lambda Function Parameters"
        Parameters:
          - RetentionInDays
          - LoggingConfigApplicationLogLevel
          - LoggingConfigLogFormat
          - SystemLogLevel
          - Runtime
          - Timeout
          - LoggingConfigSystemLogLevel
      
      - Label:
          default: "API Setup Parameters"
        Parameters:
          - ApiKeySourceType
          - QuotaLimit
          - QuotaPeriod
          - ThrottleBurstLimit
          - ThrottleRateLimit


Parameters:
  AttributeDefinitionsAttributeName:
    Type: String
    Description: Primary key of the table.
    Default: CustomerId

  AttributeDefinitionsAttributeType:
    Type: String
    Description: Type of the primary key.
    Default: "S" 
    AllowedValues: 
      - "S"
      - "N"
      - "B" 

  BillingMode:
    Type: String
    Description: Specify the billing mode. 
    AllowedValues:
      - PAY_PER_REQUEST
      - PROVISIONED
    Default: PAY_PER_REQUEST
  
  ReadCapacityUnits:
    Type: String
    Description: Read Capacity Units, valid only for provisioned mode.
    Default: "0"
  
  WriteCapacityUnits:
    Type: String
    Description: Write Capacity Units, valid only for provisioned mode.
    Default: "0"
  
  RetentionInDays:
    Type: String
    Description: Log retention days.
    Default: "7"
  
  LoggingConfigApplicationLogLevel:
    Type: String
    Description: Set this property to filter the application logs for your function that Lambda sends to CloudWatch.
    Default: INFO
    AllowedValues:
      - TRACE
      - DEBUG
      - INFO
      - WARN
      - ERROR
      - FATAL
  
  LoggingConfigLogFormat:
    Type: String 
    Description: The format in which Lambda sends your function's application and system logs to CloudWatch. Select between plain text and structured JSON.
    Default: JSON
    AllowedValues:
      - JSON
      - JSON
  
  LoggingConfigSystemLogLevel:
    Type: String
    Description: Set this property to filter the system logs for your function that Lambda sends to CloudWatch. Lambda only sends system logs at the selected level of detail and lower, where DEBUG is the highest level and WARN is the lowest.
    Default: INFO
    AllowedValues:
      - DEBUG
      - INFO
      - WARN
  
  Runtime:
    Type: String 
    Description: The identifier of the function's runtime.
    Default: python3.12
  
  Timeout:
    Type: Number
    Description: The amount of time (in seconds) that Lambda allows a function to run before stopping it.
    Default: 20
    MinValue: 3
    MaxValue: 900

  ApiKeySourceType:
    Type: String
    Description: The source of the API key for metering requests according to a usage plan. Valid values are HEADER to read the API key from the X-API-Key header of a request. AUTHORIZER to read the API key from the UsageIdentifierKey from a custom authorizer.
    AllowedValues: 
      - HEADER
      - AUTHORIZER
    Default: HEADER
  
  QuotaLimit:
    Type: Number
    Description: The target maximum number of requests that can be made in a given time period.
    MinValue: 0
    Default: 5000
  
  QuotaPeriod:
    Type: String
    Description: The time period in which the limit applies.
    Default: MONTH
    AllowedValues:
      - MONTH
      - WEEK
      - DAY
  
  ThrottleBurstLimit:
    Type: Number
    Description: The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.
    MinValue: 0
    Default: 2000
  
  ThrottleRateLimit:
    Type: Number
    Description: The API target request rate limit.
    MinValue: 0
    Default: 1000


Conditions:
  ProvisionedMode: !Not [ !Equals [!Ref BillingMode, PROVISIONED] ]


Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions: 
        - AttributeName: !Ref AttributeDefinitionsAttributeName
          AttributeType: !Ref AttributeDefinitionsAttributeType
      BillingMode: !If [ProvisionedMode, !Ref BillingMode, !Ref AWS::NoValue]
      KeySchema: 
        - AttributeName: CustomerId
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: !If [ProvisionedMode, 0, !Ref ReadCapacityUnits]
        WriteCapacityUnits: !If [ProvisionedMode, 0, !Ref WriteCapacityUnits]

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    DependsOn: DynamoDBTable
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: !Join ["", [!Ref "AWS::StackName", "-lambda-function-role"]]
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies: 
        - PolicyName: !Join ["", [!Ref "AWS::StackName", "-lambda-function-role-dynamodb-policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt DynamoDBTable.Arn
  
  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["", [!Ref "AWS::StackName", "-lambda-function-log-group"]]
      RetentionInDays: !Ref RetentionInDays
  
  SQSQueue:
    Type: AWS::SQS::Queue

  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:  
      - LambdaFunctionRole
      - LambdaFunctionLogGroup
      - SQSQueue
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event,context):
            print('It's working, move to next steps')
      Description: !Join ["", [!Ref "AWS::StackName", "-lambda-function"]]
      Environment:
        Variables:
          logging_level: INFO
      Handler: index.lambda_handler
      LoggingConfig:
        ApplicationLogLevel: !Ref LoggingConfigApplicationLogLevel
        LogFormat: !Ref LoggingConfigLogFormat
        LogGroup: !Join ["", [!Ref "AWS::StackName", "-lambda-function-log-group"]]
        SystemLogLevel: !Ref LoggingConfigSystemLogLevel
      PackageType: Zip
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: !Ref Runtime
      Timeout: !Ref Timeout

  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: !Ref ApiKeySourceType
      Description: !Join ["", [!Ref "AWS::StackName", "-rest-api-setup"]]
      EndpointConfiguration: 
        Types: 
          - REGIONAL
      Name: !Join ["", [!Ref "AWS::StackName", "-rest-api-setup"]]


  APIResourceHealthCheck:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: healthCheck
      RestApiId: !Ref RestAPI

  APIResourceGetCustomer:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: getCustomer
      RestApiId: !Ref RestAPI
  
  APIResourceCreateCustomer:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: createCustomer
      RestApiId: !Ref RestAPI
  
  APIMethodHealthCheck:
    Type: AWS::ApiGateway::Method
    DependsOn: 
      - LambdaFunction
      - APIResourceHealthCheck
      - RestAPI
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: GET
      Integration: 
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunctionARN}/invocations"
          - lambdaFunctionARN: !GetAtt LambdaFunction.Arn
      ResourceId: !Ref APIResourceHealthCheck
      RestApiId: !Ref RestAPI
  
  APIMethodGetCustomer:
    Type: AWS::ApiGateway::Method
    DependsOn: 
      - LambdaFunction
      - APIResourceGetCustomer
      - RestAPI
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: POST
      Integration: 
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunctionARN}/invocations"
          - lambdaFunctionARN: !GetAtt LambdaFunction.Arn
      ResourceId: !Ref APIResourceGetCustomer
      RestApiId: !Ref RestAPI
  
  APIMethodCreateCustomer:
    Type: AWS::ApiGateway::Method
    DependsOn: 
      - LambdaFunction
      - APIResourceCreateCustomer
      - RestAPI
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: POST
      Integration: 
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunctionARN}/invocations"
          - lambdaFunctionARN: !GetAtt LambdaFunction.Arn
      ResourceId: !Ref APIResourceCreateCustomer
      RestApiId: !Ref RestAPI
  
  APIStageDeploy:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIMethodHealthCheck
      - APIMethodGetCustomer
      - APIMethodCreateCustomer
    Properties:
      Description: !Join ["", [!Ref "AWS::StackName", "-rest-api-deployment"]]
      RestApiId: !Ref RestAPI
  
  APIStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: APIStageDeploy
    Properties:
      DeploymentId: !Ref APIStageDeploy
      Description: !Join ["", [!Ref "AWS::StackName", "-rest-api-stage"]]
      RestApiId: !Ref RestAPI
  
  APIKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: APIStage
    Properties:
      Description: !Join ["", [!Ref "AWS::StackName", "-rest-api-key"]]
      Enabled: true
      GenerateDistinctId: Boolean
      Name: String
      StageKeys: 
        - RestApiId: !Ref RestAPI
          StageName: !Ref APIStage
  
  APIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages: 
        - ApiId: !Ref RestAPI
          Stage: !Ref APIStage
      Description: !Join ["", [!Ref "AWS::StackName", "-rest-api-usage-plan"]]
      Quota: 
        Limit: !Ref QuotaLimit
        Period: !Ref QuotaPeriod
      Throttle: 
        BurstLimit: !Ref ThrottleBurstLimit
        RateLimit: !Ref ThrottleRateLimit

  APIUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref APIKey
      KeyType: API_KEY
      UsagePlanId: !Ref APIUsagePlan

  LambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/*/*/*"
        - RestAPI: !Ref RestAPI


Outputs:
  DynamoDBTableName:
    Description: Name of the DynamoDB Table. 
    Value: !Ref DynamoDBTable

  DynamoDBTableARN: 
    Description: ARN of DynamoDB Table.
    Value: !GetAtt DynamoDBTable.Arn
  
  LambdaFunctionRoleARN:
    Description: ARN of Lambda Function Role.
    Value: !GetAtt LambdaFunctionRole.Arn

  LambdaFunctionARN:
    Description: ARN of the Lambda Function.
    Value: !GetAtt LambdaFunction.Arn

  LambdaFunctionLogGroupARN:
    Description: ARN of the Lambda Function Log Group.
    Value: LambdaFunctionLogGroup.Arn

  SQSQueueARN:
    Description: ARN of dead letter queue.
    Value: !GetAtt SQSQueue.Arn

  RestAPIId:
    Description: The String Identifier of the Rest API.
    Value: !GetAtt RestAPI.RestApiId
  
  RootResourceId:
    Description: Root resource Id of the REST API.
    Value: !GetAtt RestAPI.RootResourceId
